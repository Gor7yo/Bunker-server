// websocket-mediasoup-integration.js.example
// –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Mediasoup –≤ websocket.js
// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –≤–∞—à websocket.js

// ============================================
// –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø MEDIASOUP
// ============================================

const USE_MEDIASOUP = process.env.USE_MEDIASOUP === 'true';
const MEDIASOUP_WS_URI = process.env.MEDIASOUP_WS_URI || 'ws://localhost:8888/mediasoup';
let mediasoupWs = null;
let mediasoupReady = false;

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É Mediasoup —Å–µ—Ä–≤–µ—Ä—É –Ω–∞ Selectel
if (USE_MEDIASOUP) {
  const WebSocket = require('ws');
  
  function connectToMediasoup() {
    try {
      console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Mediasoup —Å–µ—Ä–≤–µ—Ä—É: ${MEDIASOUP_WS_URI}`);
      
      mediasoupWs = new WebSocket(MEDIASOUP_WS_URI);
      
      mediasoupWs.on('open', () => {
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Mediasoup —Å–µ—Ä–≤–µ—Ä—É');
        mediasoupReady = true;
      });

      mediasoupWs.on('message', (data) => {
        try {
          const message = JSON.parse(data.toString());
          handleMediasoupMessage(message);
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Mediasoup:', error);
        }
      });

      mediasoupWs.on('error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Mediasoup:', error);
        mediasoupReady = false;
      });

      mediasoupWs.on('close', () => {
        console.warn('‚ö†Ô∏è –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Mediasoup –∑–∞–∫—Ä—ã—Ç–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è...');
        mediasoupReady = false;
        setTimeout(connectToMediasoup, 3000);
      });
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Mediasoup:', error);
      mediasoupReady = false;
    }
  }

  function handleMediasoupMessage(message) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç Mediasoup —Å–µ—Ä–≤–µ—Ä–∞
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    console.log('üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç Mediasoup:', message.type);
  }

  function sendToMediasoup(data) {
    if (mediasoupWs && mediasoupWs.readyState === WebSocket.OPEN) {
      mediasoupWs.send(JSON.stringify(data));
      return true;
    }
    return false;
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  connectToMediasoup();
  
  console.log("‚úÖ Mediasoup –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
} else {
  console.log("‚ÑπÔ∏è Mediasoup –æ—Ç–∫–ª—é—á–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è P2P —Ä–µ–∂–∏–º");
}

// ============================================
// –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò MEDIASOUP –í ws.on("message")
// ============================================

// –î–æ–±–∞–≤—å—Ç–µ —ç—Ç–∏ case –≤ switch(data.type) –≤–Ω—É—Ç—Ä–∏ ws.on("message"):

/*
        // üé¨ Mediasoup: –ø–æ–ª—É—á–µ–Ω–∏–µ RTP capabilities
        case "mediasoup_get_rtp_capabilities": {
          if (!USE_MEDIASOUP || !mediasoupReady) {
            ws.send(JSON.stringify({ type: "error", message: "Mediasoup –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω" }));
            return;
          }

          sendToMediasoup({ type: 'get_rtp_capabilities' });
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
          const originalOnMessage = mediasoupWs.onmessage;
          mediasoupWs.onmessage = (event) => {
            const data = JSON.parse(event.data);
            if (data.type === 'rtp_capabilities') {
              ws.send(JSON.stringify({
                type: "mediasoup_rtp_capabilities",
                rtpCapabilities: data.rtpCapabilities
              }));
              mediasoupWs.onmessage = originalOnMessage;
            }
          };
          break;
        }

        // üé¨ Mediasoup: —Å–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        case "mediasoup_create_transport": {
          if (!USE_MEDIASOUP || !mediasoupReady) {
            ws.send(JSON.stringify({ type: "error", message: "Mediasoup –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω" }));
            return;
          }

          sendToMediasoup({
            type: 'create_transport',
            playerId: ws.id,
            direction: data.direction || 'both'
          });
          
          // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Mediasoup —Å–µ—Ä–≤–µ—Ä–∞
          const originalOnMessage = mediasoupWs.onmessage;
          mediasoupWs.onmessage = (event) => {
            const msg = JSON.parse(event.data);
            if (msg.type === 'transport_created' && msg.transport) {
              ws.send(JSON.stringify({
                type: "mediasoup_transport_created",
                transport: msg.transport,
                direction: msg.direction
              }));
              mediasoupWs.onmessage = originalOnMessage;
            }
          };
          break;
        }

        // üé¨ Mediasoup: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
        case "mediasoup_connect_transport": {
          if (!USE_MEDIASOUP || !mediasoupReady) {
            break;
          }

          sendToMediasoup({
            type: 'connect_transport',
            playerId: ws.id,
            transportId: data.transportId,
            dtlsParameters: data.dtlsParameters,
            direction: data.direction || 'send'
          });

          // –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
          const originalOnMessage = mediasoupWs.onmessage;
          mediasoupWs.onmessage = (event) => {
            const msg = JSON.parse(event.data);
            if (msg.type === 'transport_connected' && msg.transportId === data.transportId) {
              ws.send(JSON.stringify({
                type: "mediasoup_transport_connected",
                transportId: data.transportId
              }));
              mediasoupWs.onmessage = originalOnMessage;
            }
          };
          break;
        }

        // üé¨ Mediasoup: —Å–æ–∑–¥–∞–Ω–∏–µ Producer
        case "mediasoup_create_producer": {
          if (!USE_MEDIASOUP || !mediasoupReady) {
            break;
          }

          sendToMediasoup({
            type: 'create_producer',
            playerId: ws.id,
            transportId: data.transportId,
            kind: data.kind,
            rtpParameters: data.rtpParameters
          });

          // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
          const originalOnMessage = mediasoupWs.onmessage;
          mediasoupWs.onmessage = (event) => {
            const msg = JSON.parse(event.data);
            if (msg.type === 'producer_created' && msg.producer) {
              ws.send(JSON.stringify({
                type: "mediasoup_producer_created",
                producer: msg.producer
              }));
              mediasoupWs.onmessage = originalOnMessage;
            }
          };
          break;
        }

        // üé¨ Mediasoup: —Å–æ–∑–¥–∞–Ω–∏–µ Consumer
        case "mediasoup_create_consumer": {
          if (!USE_MEDIASOUP || !mediasoupReady) {
            break;
          }

          sendToMediasoup({
            type: 'create_consumer',
            playerId: ws.id,
            remotePlayerId: data.remotePlayerId,
            kind: data.kind
          });

          // –û–∂–∏–¥–∞–µ–º –æ—Ç–≤–µ—Ç
          const originalOnMessage = mediasoupWs.onmessage;
          mediasoupWs.onmessage = (event) => {
            const msg = JSON.parse(event.data);
            if (msg.type === 'consumer_created' && msg.consumer) {
              ws.send(JSON.stringify({
                type: "mediasoup_consumer_created",
                consumer: msg.consumer
              }));
              mediasoupWs.onmessage = originalOnMessage;
            }
          };
          break;
        }
*/

// ============================================
// –û–ë–ù–û–í–õ–ï–ù–ò–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø
// ============================================

// –í ws.on("close") –¥–æ–±–∞–≤—å—Ç–µ:

/*
    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ Mediasoup (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
    if (USE_MEDIASOUP && mediasoupReady && ws.id) {
      sendToMediasoup({
        type: 'remove_player',
        playerId: ws.id
      });
    }
*/


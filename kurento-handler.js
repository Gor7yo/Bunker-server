// kurento-handler.js
// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ Kurento Media Server –¥–ª—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –º–µ–¥–∏–∞-–ø–æ—Ç–æ–∫–æ–≤

const kurentoClient = require('kurento-client');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Kurento Media Server
const KURENTO_WS_URI = process.env.KURENTO_WS_URI || 'ws://localhost:8888/kurento';

class KurentoHandler {
  constructor() {
    this.kurentoClient = null;
    this.mediaPipeline = null;
    this.endpoints = new Map(); // Map: playerId -> {endpoint, hubPort}
    this.isConnected = false;
    
    this.connect();
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kurento Media Server
  async connect() {
    try {
      console.log(`üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kurento Media Server: ${KURENTO_WS_URI}`);
      
      this.kurentoClient = await kurentoClient(KURENTO_WS_URI, {
        failfast: false,
        request_timeout: 20000
      });

      this.isConnected = true;
      console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Kurento Media Server');

      // –°–æ–∑–¥–∞–µ–º MediaPipeline –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞-–ø–æ—Ç–æ–∫–∞–º–∏
      await this.createMediaPipeline();

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–π
      this.kurentoClient.on('disconnect', () => {
        console.warn('‚ö†Ô∏è –û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Kurento Media Server');
        this.isConnected = false;
        this.mediaPipeline = null;
        this.endpoints.clear();
        
        // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        setTimeout(() => this.connect(), 3000);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kurento Media Server:', error);
      console.error('üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Kurento Media Server –∑–∞–ø—É—â–µ–Ω –Ω–∞', KURENTO_WS_URI);
      this.isConnected = false;
    }
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ MediaPipeline (–º–µ–¥–∏–∞-–∫–æ–Ω–≤–µ–π–µ—Ä–∞)
  async createMediaPipeline() {
    try {
      if (!this.kurentoClient) {
        throw new Error('Kurento Client –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }

      this.mediaPipeline = await this.kurentoClient.create('MediaPipeline');
      console.log('‚úÖ MediaPipeline —Å–æ–∑–¥–∞–Ω:', this.mediaPipeline.id);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è pipeline
      this.mediaPipeline.on('Error', (error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ MediaPipeline:', error);
      });

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è MediaPipeline:', error);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –≤ –º–µ–¥–∏–∞-—Ö–∞–±
  async addPlayer(playerId, playerName) {
    if (!this.isConnected || !this.mediaPipeline) {
      throw new Error('Kurento –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ MediaPipeline –Ω–µ —Å–æ–∑–¥–∞–Ω');
    }

    try {
      console.log(`üéÆ –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ ${playerName} (${playerId}) –≤ –º–µ–¥–∏–∞-—Ö–∞–±`);

      // –°–æ–∑–¥–∞–µ–º WebRtcEndpoint –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
      const webRtcEndpoint = await this.mediaPipeline.create('WebRtcEndpoint');

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      webRtcEndpoint.on('IceCandidateFound', (event) => {
        const candidate = kurentoClient.getComplexType('IceCandidate')(event.candidate);
        console.log(`üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç ${playerId}`);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –∫–ª–∏–µ–Ω—Ç—É (—á–µ—Ä–µ–∑ WebSocket –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ—Ç–¥–µ–ª—å–Ω–æ)
        this.onIceCandidate(playerId, candidate);
      });

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ endpoint
      webRtcEndpoint.on('Error', (error) => {
        console.error(`‚ùå –û—à–∏–±–∫–∞ WebRtcEndpoint –¥–ª—è ${playerId}:`, error);
      });

      // –°–æ–∑–¥–∞–µ–º HubPort –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Composite (–º–∏–∫—à–µ—Ä)
      // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ–º Composite –≤–º–µ—Å—Ç–æ HubPort
      // –°–æ–∑–¥–∞–µ–º Composite –¥–ª—è –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
      let composite = null;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ Composite –≤ pipeline
      // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Composite –Ω–∞ –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      // –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –ª—É—á—à–µ —Å–æ–∑–¥–∞—Ç—å –æ–¥–∏–Ω Composite –∏ –ø–æ–¥–∫–ª—é—á–∞—Ç—å –∫ –Ω–µ–º—É –≤—Å–µ—Ö
      
      // –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é —Å—Ö–µ–º—É: –∫–∞–∂–¥—ã–π endpoint –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–≤–æ–∏ –ø–æ—Ç–æ–∫–∏
      // –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø–æ—Ç–æ–∫–∏ –æ—Ç –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —á–µ—Ä–µ–∑ HubPort –∏–ª–∏ Composite

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º endpoint
      this.endpoints.set(playerId, {
        endpoint: webRtcEndpoint,
        playerName: playerName,
        createdAt: Date.now()
      });

      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${playerName} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–µ–¥–∏–∞-—Ö–∞–±`);
      
      return webRtcEndpoint;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ${playerId}:`, error);
      throw error;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –∏–∑ –º–µ–¥–∏–∞-—Ö–∞–±–∞
  async removePlayer(playerId) {
    try {
      const playerData = this.endpoints.get(playerId);
      if (!playerData) {
        console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–µ–¥–∏–∞-—Ö–∞–±–µ`);
        return;
      }

      console.log(`üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ ${playerId} –∏–∑ –º–µ–¥–∏–∞-—Ö–∞–±–∞`);

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º endpoint
      if (playerData.endpoint) {
        await playerData.endpoint.release();
      }

      // –£–¥–∞–ª—è–µ–º –∏–∑ Map
      this.endpoints.delete(playerId);

      console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${playerId} —É–¥–∞–ª–µ–Ω –∏–∑ –º–µ–¥–∏–∞-—Ö–∞–±–∞`);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞ ${playerId}:`, error);
    }
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ SDP offer –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
  async processOffer(playerId, sdpOffer) {
    try {
      const playerData = this.endpoints.get(playerId);
      if (!playerData || !playerData.endpoint) {
        throw new Error(`Endpoint –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      console.log(`üì• –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º SDP offer –æ—Ç ${playerId}`);

      const sdpAnswer = await playerData.endpoint.processOffer(sdpOffer);
      
      // –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      await playerData.endpoint.gatherCandidates();

      console.log(`üì§ SDP answer –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –¥–ª—è ${playerId}`);

      return sdpAnswer;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ SDP offer –¥–ª—è ${playerId}:`, error);
      throw error;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
  async addIceCandidate(playerId, candidate) {
    try {
      const playerData = this.endpoints.get(playerId);
      if (!playerData || !playerData.endpoint) {
        throw new Error(`Endpoint –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${playerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      }

      await playerData.endpoint.addIceCandidate(candidate);

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –¥–ª—è ${playerId}:`, error);
    }
  }

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö endpoints –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É (–¥–ª—è mesh-–ø–æ–¥–æ–±–Ω–æ–π —Ç–æ–ø–æ–ª–æ–≥–∏–∏)
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Composite –¥–ª—è –º–∏–∫—à–∏—Ä–æ–≤–∞–Ω–∏—è
  async connectEndpoints() {
    try {
      const endpointsArray = Array.from(this.endpoints.values());
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–∞–∂–¥—ã–π endpoint –∫ –∫–∞–∂–¥–æ–º—É –¥—Ä—É–≥–æ–º—É
      for (let i = 0; i < endpointsArray.length; i++) {
        for (let j = i + 1; j < endpointsArray.length; j++) {
          const endpoint1 = endpointsArray[i].endpoint;
          const endpoint2 = endpointsArray[j].endpoint;
          
          // –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É (–¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ)
          await endpoint1.connect(endpoint2);
          await endpoint2.connect(endpoint1);
          
          console.log(`üîó –°–æ–µ–¥–∏–Ω–µ–Ω—ã endpoints: ${endpointsArray[i].playerName} ‚Üî ${endpointsArray[j].playerName}`);
        }
      }

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è endpoints:', error);
    }
  }

  // Callback –¥–ª—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ websocket.js)
  onIceCandidate(playerId, candidate) {
    // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∏–∑ websocket.js
    console.log(`üßä ICE –∫–∞–Ω–¥–∏–¥–∞—Ç –æ—Ç ${playerId}:`, candidate);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
  getStatus() {
    return {
      isConnected: this.isConnected,
      hasPipeline: !!this.mediaPipeline,
      connectedPlayers: this.endpoints.size,
      players: Array.from(this.endpoints.entries()).map(([id, data]) => ({
        id,
        name: data.playerName,
        createdAt: data.createdAt
      }))
    };
  }

  // –û—á–∏—Å—Ç–∫–∞ –∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
  async cleanup() {
    try {
      console.log('üßπ –û—á–∏—Å—Ç–∫–∞ Kurento —Ä–µ—Å—É—Ä—Å–æ–≤...');

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Å–µ endpoints
      for (const [playerId, playerData] of this.endpoints.entries()) {
        if (playerData.endpoint) {
          await playerData.endpoint.release();
        }
      }
      this.endpoints.clear();

      // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º MediaPipeline
      if (this.mediaPipeline) {
        await this.mediaPipeline.release();
        this.mediaPipeline = null;
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç
      if (this.kurentoClient) {
        // Kurento Client –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ disconnect, –ø—Ä–æ—Å—Ç–æ –æ—á–∏—â–∞–µ–º —Å—Å—ã–ª–∫—É
        this.kurentoClient = null;
      }

      this.isConnected = false;
      console.log('‚úÖ Kurento —Ä–µ—Å—É—Ä—Å—ã –æ—á–∏—â–µ–Ω—ã');

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ Kurento:', error);
    }
  }
}

module.exports = KurentoHandler;


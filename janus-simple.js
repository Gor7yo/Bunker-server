// –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π SFU –Ω–∞ Node.js –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
// –≠—Ç–æ –±–∞–∑–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏
// –î–ª—è production —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Janus, mediasoup –∏–ª–∏ LiveKit

const WebSocket = require('ws');

class SimpleSFU {
  constructor() {
    this.rooms = new Map(); // roomId -> {publishers: Map<playerId, {stream, pc}>}
    this.subscribers = new Map(); // playerId -> {roomId, connections: Map<remoteId, pc>}
  }

  /**
   * –ò–≥—Ä–æ–∫ –ø—É–±–ª–∏–∫—É–µ—Ç —Å–≤–æ–π –ø–æ—Ç–æ–∫
   */
  async publishStream(playerId, roomId, offer) {
    if (!this.rooms.has(roomId)) {
      this.rooms.set(roomId, { publishers: new Map() });
    }

    const room = this.rooms.get(roomId);
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è RTCPeerConnection –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    // –ù–æ Node.js –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç WebRTC –Ω–∞–ø—Ä—è–º—É—é
    
    // –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ SFU –Ω—É–∂–µ–Ω –º–µ–¥–∏–∞-—Å–µ—Ä–≤–µ—Ä (Janus, Kurento, mediasoup)
    console.log(`üì° –ò–≥—Ä–æ–∫ ${playerId} –ø—É–±–ª–∏–∫—É–µ—Ç –ø–æ—Ç–æ–∫ –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`);
    
    return {
      type: 'sfu_publish_success',
      roomId,
      playerId
    };
  }

  /**
   * –ò–≥—Ä–æ–∫ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –ø–æ—Ç–æ–∫–∏ –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
   */
  async subscribeToStreams(playerId, roomId) {
    if (!this.rooms.has(roomId)) {
      return { publishers: [] };
    }

    const room = this.rooms.get(roomId);
    const publishers = Array.from(room.publishers.keys());
    
    console.log(`üì° –ò–≥—Ä–æ–∫ ${playerId} –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ ${publishers.length} –ø–æ—Ç–æ–∫–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}`);
    
    return {
      type: 'sfu_subscribe_success',
      roomId,
      publishers
    };
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
   */
  leaveRoom(playerId) {
    // –£–¥–∞–ª—è–µ–º –∏–∑ –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç
    for (const [roomId, room] of this.rooms.entries()) {
      room.publishers.delete(playerId);
      if (room.publishers.size === 0) {
        this.rooms.delete(roomId);
      }
    }
    
    this.subscribers.delete(playerId);
    console.log(`üì° –ò–≥—Ä–æ–∫ ${playerId} –æ—Ç–∫–ª—é—á–µ–Ω –æ—Ç –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç`);
  }
}

const sfu = new SimpleSFU();

module.exports = sfu;


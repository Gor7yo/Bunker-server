// server.js
const WebSocket = require("ws");

const wss = new WebSocket.Server({ port: 5000 }, () =>
  console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
);

const MAX_PLAYERS = 3; // –£–≤–µ–ª–∏—á–∏–ª –¥–æ 8
let allPlayers = [];
let host = null;
let gameState = { started: false };

// ============================
// üì° –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
// ============================
function broadcast(data, excludeWs = null) {
  const msg = JSON.stringify(data);
  const clients = [...allPlayers, host].filter(p => p && p.readyState === WebSocket.OPEN);
  
  clients.forEach((client) => {
    if (client !== excludeWs && client.readyState === WebSocket.OPEN) {
      try {
        client.send(msg);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
      }
    }
  });
}

// ============================
// üîÅ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤—Å–µ–º
// ============================
function sendPlayersUpdate() {
  const activePlayers = allPlayers.filter(p => p.readyState === WebSocket.OPEN);
  const activeHost = host && host.readyState === WebSocket.OPEN ? host : null;

  const playersList = [...activePlayers];
  if (activeHost) {
    playersList.push(activeHost);
  }

  const readyCount = playersList.filter((p) => p.ready).length;
  const totalPlayers = playersList.length;

  console.log("üì§ –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω:", activePlayers.length, "–ì–æ—Ç–æ–≤—ã—Ö:", readyCount);

  broadcast({
    type: "players_update",
    players: playersList.map((p) => ({
      id: p.id,
      name: p.name,
      ready: p.ready,
      role: p.role,
    })),
    readyCount,
    totalPlayers,
    regularPlayers: activePlayers.length,
    maxRegularPlayers: MAX_PLAYERS,
    hostConnected: !!activeHost,
    hostReady: activeHost ? activeHost.ready : false,
    gameStarted: gameState.started
  });
}

// ============================
// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º: –≤—Å–µ –ª–∏ –≥–æ—Ç–æ–≤—ã, –∏ –º–æ–∂–Ω–æ –ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å
// ============================
function checkAllReady() {
  const activePlayers = allPlayers.filter(p => p.readyState === WebSocket.OPEN);
  const activeHost = host && host.readyState === WebSocket.OPEN ? host : null;

  if (!activeHost || !activeHost.ready) {
    gameState.started = false;
    return;
  }

  const playersList = [...activePlayers, activeHost];
  const allReady = playersList.length > 1 && playersList.every((p) => p.ready);

  if (allReady && !gameState.started) {
    gameState.started = true;
    console.log("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
    broadcast({ 
      type: "game_started",
      message: "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ—Å–≤—è–∑—å..."
    });
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    setTimeout(() => {
      broadcast({
        type: "game_message", 
        message: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
      });
    }, 3000);
  }
}

// ============================
// üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
// ============================
function sendToPlayer(playerId, data) {
  const allConnections = [...allPlayers, host];
  const targetPlayer = allConnections.find(p => p && p.id === playerId && p.readyState === WebSocket.OPEN);
  
  if (targetPlayer) {
    try {
      targetPlayer.send(JSON.stringify(data));
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–≥—Ä–æ–∫—É ${playerId}:`, error);
      return false;
    }
  }
  return false;
}

// ============================
// üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
// ============================
wss.on("connection", (ws) => {
  ws.id = Date.now().toString(36) + Math.random().toString(36).slice(2);
  ws.name = null;
  ws.role = "player";
  ws.ready = false;

  console.log("üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:", ws.id);

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  ws.send(JSON.stringify({
    type: "welcome",
    yourId: ws.id,
    message: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
  }));

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  sendPlayersUpdate();

  ws.on("message", (message) => {
    try {
      const data = JSON.parse(message);

      switch (data.type) {
        // üëã –ò–≥—Ä–æ–∫ –≤–æ—à—ë–ª
        case "join": {
          const nickname = (data.name || "").trim();
          
          if (!nickname) {
            ws.send(JSON.stringify({ type: "error", message: "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º" }));
            return;
          }

          if (nickname.length > 24) {
            ws.send(JSON.stringify({ type: "error", message: "–ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π" }));
            return;
          }

          // –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å –∏–º—è
          if (ws.name) {
            if (ws.name !== nickname) {
              ws.name = nickname;
              sendPlayersUpdate();
            }
            return;
          }

          // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–º–µ–Ω
          const activePlayers = [...allPlayers, host].filter(p => p && p.readyState === WebSocket.OPEN);
          const existingPlayer = activePlayers.find(p => p.name && p.name.toLowerCase() === nickname.toLowerCase());
          
          if (existingPlayer) {
            ws.send(JSON.stringify({ type: "error", message: "–ù–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç" }));
            return;
          }

          ws.name = nickname;

          // üéô –í–µ–¥—É—â–∏–π
          if (["millisana", "admin", "host", "–≤–µ–¥—É—â–∏–π"].includes(nickname.toLowerCase())) {
            if (host && host.readyState === WebSocket.OPEN) {
              ws.send(JSON.stringify({ type: "error", message: "–í–µ–¥—É—â–∏–π —É–∂–µ –µ—Å—Ç—å" }));
              return;
            }
            
            ws.role = "host";
            host = ws;
            console.log(`üéô –í–µ–¥—É—â–∏–π: ${ws.name}`);
            
            ws.send(JSON.stringify({ 
              type: "joined_as_host", 
              id: ws.id 
            }));
            
          } else {
            // üë§ –û–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫
            const activeRegularPlayers = allPlayers.filter(p => p.readyState === WebSocket.OPEN);
            
            if (activeRegularPlayers.length >= MAX_PLAYERS) {
              ws.send(JSON.stringify({ 
                type: "error", 
                message: `–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (–º–∞–∫—Å–∏–º—É–º ${MAX_PLAYERS} –∏–≥—Ä–æ–∫–æ–≤)` 
              }));
              return;
            }

            allPlayers.push(ws);
            console.log(`üë§ –ò–≥—Ä–æ–∫: ${ws.name}`);
            
            ws.send(JSON.stringify({ 
              type: "joined_as_player", 
              id: ws.id 
            }));
          }

          sendPlayersUpdate();
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ WebRTC
          broadcast({
            type: "new_player_joined",
            playerId: ws.id,
            playerName: ws.name
          }, ws);
          
          break;
        }

        // ‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª "–≥–æ—Ç–æ–≤"
        case "set_ready": {
          if (!ws.name) {
            ws.send(JSON.stringify({ type: "error", message: "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º" }));
            return;
          }

          ws.ready = data.ready;
          console.log(`‚úÖ ${ws.name}: ${data.ready ? '–≥–æ—Ç–æ–≤' : '–Ω–µ –≥–æ—Ç–æ–≤'}`);

          ws.send(JSON.stringify({
            type: "ready_status",
            ready: data.ready
          }));

          sendPlayersUpdate();
          checkAllReady();
          break;
        }

        // üìä –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–±–±–∏
        case "get_lobby_state": {
          sendPlayersUpdate();
          break;
        }

        // üîÑ –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
        case "reset_game": {
          if (ws.role === "host") {
            gameState.started = false;
            allPlayers.forEach(p => p.ready = false);
            if (host) host.ready = false;
            
            broadcast({
              type: "game_reset",
              message: "–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞"
            });
            
            sendPlayersUpdate();
          }
          break;
        }

        // üì° WebRTC —Å–∏–≥–Ω–∞–ª—ã - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        case "signal": {
          if (!data.targetId || !data.signal) {
            ws.send(JSON.stringify({ type: "error", message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª" }));
            return;
          }

          // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
          const targetPlayer = [...allPlayers, host].find(p => 
            p && p.id === data.targetId && p.readyState === WebSocket.OPEN
          );
          
          if (!targetPlayer) {
            console.log(`‚ùå –¶–µ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫ ${data.targetId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            ws.send(JSON.stringify({ type: "error", message: "–ò–≥—Ä–æ–∫ –Ω–µ –≤ —Å–µ—Ç–∏" }));
            return;
          }

          // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          const success = sendToPlayer(data.targetId, {
            type: "signal",
            fromId: ws.id,
            fromName: ws.name,
            signal: data.signal,
            timestamp: Date.now()
          });

          if (success) {
            const signalType = data.signal.type || 'ice-candidate';
            console.log(`üì° ${signalType} –æ—Ç ${ws.name} –∫ ${targetPlayer.name}`);
          }
          break;
        }

        // üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫—É WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        case "refresh_connections": {
          console.log(`üîÑ ${ws.name} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);
          broadcast({
            type: "refresh_connections_request",
            from: ws.id
          }, ws);
          break;
        }

        // üí¨ –ß–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        case "chat_message": {
          if (data.message) {
            broadcast({
              type: "chat_message",
              from: ws.id,
              fromName: ws.name,
              message: data.message,
              timestamp: Date.now()
            }, ws);
          }
          break;
        }

        default:
          ws.send(JSON.stringify({ type: "error", message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" }));
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      ws.send(JSON.stringify({ type: "error", message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }));
    }
  });

  // ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
  ws.on("close", () => {
    console.log(`‚ùå –û—Ç–∫–ª—é—á–∏–ª—Å—è: ${ws.name || 'Unknown'} (${ws.role})`);
    
    if (ws.role === "player") {
      allPlayers = allPlayers.filter((p) => p !== ws);
    } else if (ws.role === "host") {
      host = null;
      broadcast({ 
        type: "host_left",
        message: "–í–µ–¥—É—â–∏–π –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã"
      });
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
    broadcast({
      type: "player_left",
      playerId: ws.id,
      playerName: ws.name
    });

    sendPlayersUpdate();
  });

  ws.on("error", (error) => {
    console.error(`üí• –û—à–∏–±–∫–∞: ${ws.name || ws.id}`, error);
  });
});

console.log("üöÄ –°–µ—Ä–≤–µ—Ä '–ë—É–Ω–∫–µ—Ä' –≥–æ—Ç–æ–≤ –¥–ª—è 8 –∏–≥—Ä–æ–∫–æ–≤!");
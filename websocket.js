// server.js
const WebSocket = require("ws");
const propertiesData = require("./properties.json");

const wss = new WebSocket.Server({ port: 5000 }, () =>
  console.log("‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 5000")
);

const MAX_PLAYERS = 8; // –£–≤–µ–ª–∏—á–∏–ª –¥–æ 8
let allPlayers = [];
let host = null;
let adminPanel = null; // –û—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
let gameState = { 
  started: false, 
  startTime: null, 
  ready: false, // ready - –∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å"
  currentRound: 0,
  totalRounds: 5 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 5 —Ä–∞—É–Ω–¥–æ–≤
};
let bannedPlayers = new Set(); // Set –∏–∑ ID –∏–∑–≥–Ω–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
let highlightedPlayerId = null; // ID –∏–≥—Ä–æ–∫–∞ —Å –∑–µ–ª–µ–Ω–æ–π —Ä–∞–º–∫–æ–π (–º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)
let disconnectedPlayers = new Map(); // Map: nickname -> {characteristics, id, role}
let usedCards = {}; // Map: category -> Set of used card values (–¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç)
let votingState = {
  phase: null, // null | "selection" | "voting" - —ç—Ç–∞–ø –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  candidates: new Set(), // Set –∏–∑ ID –∏–≥—Ä–æ–∫–æ–≤, –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
  votes: new Map(), // Map: voterId -> targetPlayerId (–∫—Ç–æ –∑–∞ –∫–æ–≥–æ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª)
  voteCounts: {} // –û–±—ä–µ–∫—Ç: targetPlayerId -> –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤
};
let votingHistory = []; // –ò—Å—Ç–æ—Ä–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π: [{timestamp, results: [{playerId, name, votes}]}]

// ============================
// üé≤ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –∏–≥—Ä–æ–∫–∞ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π)
// ============================
function generatePlayerCharacteristics() {
  const characteristics = {};
  
  // –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  const categories = ['bandage', 'actions', 'fact', 'fobia', 'health', 'hobbie', 'age', 'proffesion'];
  
  categories.forEach(category => {
    const categoryData = propertiesData.propertiesCategory.find(cat => cat.category === category);
    if (categoryData && categoryData.items.length > 0) {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Set –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç
      if (!usedCards[category]) {
        usedCards[category] = new Set();
      }
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã (–Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ)
      const availableItems = categoryData.items.filter(item => !usedCards[category].has(item.value));
      
      if (availableItems.length === 0) {
        // –ï—Å–ª–∏ –≤—Å–µ –∫–∞—Ä—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        console.warn(`‚ö†Ô∏è –í—Å–µ –∫–∞—Ä—Ç—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ${category} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã! –°–±—Ä–∞—Å—ã–≤–∞–µ–º...`);
        usedCards[category] = new Set();
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ä—Ç—ã –∑–∞–Ω–æ–≤–æ
        const randomIndex = Math.floor(Math.random() * categoryData.items.length);
        const selectedItem = categoryData.items[randomIndex];
        usedCards[category].add(selectedItem.value);
        
        characteristics[category] = {
          value: selectedItem.value,
          description: selectedItem.description || null,
          experience: selectedItem.experience || null,
          revealed: false
        };
      } else {
        // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç—É –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        const randomIndex = Math.floor(Math.random() * availableItems.length);
        const selectedItem = availableItems[randomIndex];
        
        // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—É –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—É—é
        usedCards[category].add(selectedItem.value);
        
        characteristics[category] = {
          value: selectedItem.value,
          description: selectedItem.description || null,
          experience: selectedItem.experience || null,
          revealed: false // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–∫—Ä—ã—Ç—ã
        };
      }
    }
  });
  
  return characteristics;
}

// ============================
// üìù –ü–æ–º–µ—á–∞–µ—Ç –∫–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
// ============================
function markPlayerCardsAsUsed(characteristics) {
  if (!characteristics) return;
  
  Object.keys(characteristics).forEach(category => {
    const cardValue = characteristics[category]?.value;
    if (cardValue) {
      if (!usedCards[category]) {
        usedCards[category] = new Set();
      }
      usedCards[category].add(cardValue);
    }
  });
}

// ============================
// üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –∏–≥—Ä—ã
// ============================
function generateAllPlayerCards() {
  console.log("üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤...");
  
  // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π
  usedCards = {};
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  allPlayers.forEach(player => {
    if (player.readyState === WebSocket.OPEN && !player.characteristics) {
      player.characteristics = generatePlayerCharacteristics();
      console.log(`üìã –ö–∞—Ä—Ç—ã –¥–ª—è ${player.name}:`, Object.keys(player.characteristics));
    } else if (player.characteristics) {
      // –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã (–ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏), –ø–æ–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
      markPlayerCardsAsUsed(player.characteristics);
    }
  });
  
  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ
  if (host && host.readyState === WebSocket.OPEN) {
    if (!host.characteristics) {
      host.characteristics = generatePlayerCharacteristics();
      console.log(`üìã –ö–∞—Ä—Ç—ã –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ ${host.name}:`, Object.keys(host.characteristics));
    } else {
      // –ï—Å–ª–∏ —É —Ö–æ—Å—Ç–∞ —É–∂–µ –µ—Å—Ç—å –∫–∞—Ä—Ç—ã (–ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏), –ø–æ–º–µ—á–∞–µ–º –∏—Ö –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
      markPlayerCardsAsUsed(host.characteristics);
    }
  }
}

// ============================
// ‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π
// ============================
function handleActionCard(actionType, parameters, allConnections) {
  console.log(`‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç—ã: ${actionType}`, parameters);
  
  switch (actionType) {
    case "–û–±–º–µ–Ω —Å—É–¥—å–±–∞–º–∏":
      handleExchangeFates(parameters.selectedPlayers, allConnections);
      break;
    
    case "–í—ã–±–æ—Ä–æ—á–Ω—ã–π –æ–±–º–µ–Ω":
      handleSelectiveExchange(parameters.selectedPlayers, parameters.selectedCharacteristics, allConnections);
      break;
    
    case "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ":
      handleSuspicion(parameters.selectedPlayers, allConnections);
      break;
    
    case "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—å–µ":
      handleDossierCheck(parameters.selectedPlayers, parameters.selectedCharacteristics, allConnections);
      break;
    
    case "–ê—Ç–∞–∫–∞ –Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—é":
      handleReputationAttack(parameters.selectedPlayers, allConnections);
      break;
    
    case "–†–µ–∏–Ω–∫–∞—Ä–Ω–∞—Ü–∏—è":
      handleReincarnation(parameters.selectedPlayers, allConnections);
      break;
    
    case "–ü–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è":
      handleRetraining(parameters.selectedPlayers, allConnections);
      break;
    
    case "–§–æ–±–∏—è –∏—Å—á–µ–∑–ª–∞":
      handlePhobiaGone(parameters.selectedPlayers, allConnections);
      break;
    
    case "–°–±—Ä–æ—Å—Å –∑–¥–æ—Ä–æ–≤—å—è":
      handleHealthReset(allConnections);
      break;
    
    case "–í—Ç–æ—Ä–æ–π —à–∞–Ω—Å":
      handleSecondChance(parameters.selectedPlayers, allConnections);
      break;
    
    case "–ò–º–º—É–Ω–∏—Ç–µ—Ç":
      handleImmunity(parameters.selectedPlayers, allConnections);
      break;
    
    case "–¢–∞–π–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ":
      handleSecretKnowledge(parameters.selectedPlayers, parameters.selectedCharacteristics, allConnections);
      break;
    
    case "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫":
      handleRestart(allConnections);
      break;
    
    case "–ò—Å–ø–æ–≤–µ–¥—å":
      handleConfession(parameters.selectedPlayers, parameters.selectedCharacteristics, allConnections);
      break;
    
    case "–ì–µ–Ω–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è":
      handleGeneTherapy(parameters.selectedPlayers, parameters.selectedCharacteristics, allConnections);
      break;
    
    case "–ù–∞—Å–ª–µ–¥–∏–µ":
      handleLegacy(parameters.selectedPlayers, allConnections);
      break;
    
    case "–†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π —Ñ–∞–Ω–∞—Ç–∏–∑–º":
      handleReligiousFanaticism(parameters.selectedPlayers, allConnections);
      break;
    
    case "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ":
      handleExperimentalTreatment(parameters.selectedPlayers, allConnections);
      break;
    
    default:
      console.log(`‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${actionType}`);
  }
}

// –û–±–º–µ–Ω —Å—É–¥—å–±–∞–º–∏ - –º–µ–Ω—è—é—Ç—Å—è –≤—Å–µ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
function handleExchangeFates(playerIds, allConnections) {
  if (!playerIds || playerIds.length !== 2) {
    console.error("‚ùå –û–±–º–µ–Ω —Å—É–¥—å–±–∞–º–∏ —Ç—Ä–µ–±—É–µ—Ç –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤");
    return;
  }
  
  const [player1Id, player2Id] = playerIds;
  const player1 = allConnections.find(p => p && p.id === player1Id);
  const player2 = allConnections.find(p => p && p.id === player2Id);
  
  if (!player1 || !player2 || !player1.characteristics || !player2.characteristics) {
    console.error("‚ùå –ò–≥—Ä–æ–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É –Ω–∏—Ö –Ω–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫");
    return;
  }
  
  // –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –æ—Ç–∫—Ä—ã—Ç—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
  const categories = ['bandage', 'actions', 'fact', 'fobia', 'health', 'hobbie', 'age', 'proffesion'];
  
  categories.forEach(category => {
    const char1 = player1.characteristics[category];
    const char2 = player2.characteristics[category];
    
    if (char1 && char2 && char1.revealed && char2.revealed) {
      // –û–±–º–µ–Ω –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
      const tempValue = char1.value;
      char1.value = char2.value;
      char2.value = tempValue;
      
      console.log(`üîÑ –û–±–º–µ–Ω ${category}: ${char2.value} <-> ${char1.value}`);
    }
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
  sendPlayersUpdate();
}

// –°–±—Ä–æ—Å –∑–¥–æ—Ä–æ–≤—å—è - –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º –Ω—É–∂–Ω–æ –≤—ã—Ç—è–Ω—É—Ç—å –Ω–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
function handleHealthReset(allConnections) {
  allConnections.forEach(player => {
    if (player && player.characteristics && player.characteristics.health) {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª—É—á–∞–π–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ
      const healthData = propertiesData.propertiesCategory.find(cat => cat.category === 'health');
      
      if (healthData && healthData.items.length > 0) {
        const randomIndex = Math.floor(Math.random() * healthData.items.length);
        const selectedHealth = healthData.items[randomIndex];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å revealed
        const wasRevealed = player.characteristics.health.revealed;
        
        player.characteristics.health = {
          value: selectedHealth.value,
          description: selectedHealth.description || null,
          experience: selectedHealth.experience || null,
          revealed: wasRevealed // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å —Ä–∞—Å–∫—Ä—ã—Ç–∏—è
        };
        
        console.log(`üè• –ù–æ–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ –¥–ª—è ${player.name}: ${selectedHealth.value} (—Ä–∞—Å–∫—Ä—ã—Ç–æ: ${wasRevealed})`);
      }
    }
  });
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
  sendPlayersUpdate();
}

// –í—ã–±–æ—Ä–æ—á–Ω—ã–π –æ–±–º–µ–Ω - –æ–±–º–µ–Ω—è–π –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —Å –ª—é–±—ã–º –∏–≥—Ä–æ–∫–æ–º
function handleSelectiveExchange(playerIds, characteristic, allConnections) {
  if (!playerIds || playerIds.length !== 2 || !characteristic) {
    console.error("‚ùå –í—ã–±–æ—Ä–æ—á–Ω—ã–π –æ–±–º–µ–Ω —Ç—Ä–µ–±—É–µ—Ç –¥–≤—É—Ö –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É");
    return;
  }
  
  const [player1Id, player2Id] = playerIds;
  const player1 = allConnections.find(p => p && p.id === player1Id);
  const player2 = allConnections.find(p => p && p.id === player2Id);
  
  if (!player1 || !player2 || !player1.characteristics || !player2.characteristics) {
    return;
  }
  
  const char1 = player1.characteristics[characteristic];
  const char2 = player2.characteristics[characteristic];
  
  if (char1 && char2) {
    const tempValue = char1.value;
    const tempRevealed = char1.revealed;
    char1.value = char2.value;
    char1.revealed = char2.revealed;
    char2.value = tempValue;
    char2.revealed = tempRevealed;
    console.log(`üîÑ –í—ã–±–æ—Ä–æ—á–Ω—ã–π –æ–±–º–µ–Ω ${characteristic}`);
  }
  
  sendPlayersUpdate();
}

// –ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ - –æ–¥–∏–Ω –∏–≥—Ä–æ–∫ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∑–∞–∫—Ä—ã—Ç—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
function handleSuspicion(playerIds, allConnections) {
  if (!playerIds || playerIds.length !== 1) return;
  
  const player = allConnections.find(p => p && p.id === playerIds[0]);
  if (!player || !player.characteristics) return;
  
  const closedCharacteristics = Object.keys(player.characteristics).filter(
    key => player.characteristics[key] && !player.characteristics[key].revealed
  );
  
  if (closedCharacteristics.length > 0) {
    const randomKey = closedCharacteristics[Math.floor(Math.random() * closedCharacteristics.length)];
    player.characteristics[randomKey].revealed = true;
    console.log(`üîç –†–∞—Å–∫—Ä—ã—Ç–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${randomKey}`);
  }
  
  sendPlayersUpdate();
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—å–µ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–¥–Ω—É –∑–∞–∫—Ä—ã—Ç—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
function handleDossierCheck(playerIds, characteristic, allConnections) {
  if (!playerIds || playerIds.length !== 1 || !characteristic) return;
  console.log(`üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—å–µ –∏–≥—Ä–æ–∫–∞ ${playerIds[0]}, —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${characteristic}`);
  sendPlayersUpdate();
}

// –ê—Ç–∞–∫–∞ –Ω–∞ —Ä–µ–ø—É—Ç–∞—Ü–∏—é - –∏–≥—Ä–æ–∫ —Ç–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å
function handleReputationAttack(playerIds, allConnections) {
  if (!playerIds || playerIds.length !== 1) return;
  
  const player = allConnections.find(p => p && p.id === playerIds[0]);
  if (!player) return;
  
  player.muted = true;
  console.log(`üîá –ò–≥—Ä–æ–∫ ${player.name} –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∞–≤–æ –≥–æ–≤–æ—Ä–∏—Ç—å`);
  
  sendPlayersUpdate();
}

// –†–µ–∏–Ω–∫–∞—Ä–Ω–∞—Ü–∏—è - –∏–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç
function handleReincarnation(playerIds, allConnections) {
  if (!playerIds || playerIds.length !== 1) return;
  
  const player = allConnections.find(p => p && p.id === playerIds[0]);
  if (!player || !player.characteristics) return;
  
  const ageData = propertiesData.propertiesCategory.find(cat => cat.category === 'age');
  if (ageData && ageData.items.length > 0) {
    const randomIndex = Math.floor(Math.random() * ageData.items.length);
    const selectedAge = ageData.items[randomIndex];
    player.characteristics.age.value = selectedAge.value;
    console.log(`üîÑ –ù–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç: ${selectedAge.value}`);
  }
  
  sendPlayersUpdate();
}

// –ü–µ—Ä–µ–∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è - –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é
function handleRetraining(playerIds, allConnections) {
  if (!playerIds || playerIds.length !== 1) return;
  
  const player = allConnections.find(p => p && p.id === playerIds[0]);
  if (!player || !player.characteristics) return;
  
  const professionData = propertiesData.propertiesCategory.find(cat => cat.category === 'proffesion');
  if (professionData && professionData.items.length > 0) {
    const randomIndex = Math.floor(Math.random() * professionData.items.length);
    const selectedProf = professionData.items[randomIndex];
    player.characteristics.proffesion.value = selectedProf.value;
    console.log(`üéì –ù–æ–≤–∞—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è: ${selectedProf.value}`);
  }
  
  sendPlayersUpdate();
}

// –§–æ–±–∏—è –∏—Å—á–µ–∑–ª–∞ - –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —Ñ–æ–±–∏–∏
function handlePhobiaGone(playerIds, allConnections) {
  if (!playerIds || playerIds.length !== 1) return;
  
  const player = allConnections.find(p => p && p.id === playerIds[0]);
  if (!player || !player.characteristics) return;
  
  const wasRevealed = player.characteristics.fobia ? player.characteristics.fobia.revealed : false;
  
  player.characteristics.fobia = {
    value: "–ù–µ—Ç —Ñ–æ–±–∏–∏",
    description: null,
    experience: null,
    revealed: wasRevealed
  };
  console.log(`üòå –§–æ–±–∏—è –∏—Å—á–µ–∑–ª–∞`);
  
  sendPlayersUpdate();
}

// –í—Ç–æ—Ä–æ–π —à–∞–Ω—Å - –≤–µ—Ä–Ω—É—Ç—å –∏–∑–≥–Ω–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
function handleSecondChance(playerIds, allConnections) {
  console.log(`üîÑ –í—Ç–æ—Ä–æ–π —à–∞–Ω—Å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è`);
  sendPlayersUpdate();
}

// –ò–º–º—É–Ω–∏—Ç–µ—Ç - –Ω–µ–ª—å–∑—è –±—ã—Ç—å –∏–∑–≥–Ω–∞–Ω–Ω—ã–º
function handleImmunity(playerIds, allConnections) {
  if (!playerIds || playerIds.length !== 1) return;
  
  const player = allConnections.find(p => p && p.id === playerIds[0]);
  if (!player) return;
  
  player.immune = true;
  console.log(`üõ°Ô∏è –ò–≥—Ä–æ–∫ ${player.name} –ø–æ–ª—É—á–∏–ª –∏–º–º—É–Ω–∏—Ç–µ—Ç`);
  
  sendPlayersUpdate();
}

// –¢–∞–π–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–¥–Ω—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
function handleSecretKnowledge(playerIds, characteristic, allConnections) {
  console.log(`üîÆ –¢–∞–π–Ω–æ–µ –∑–Ω–∞–Ω–∏–µ`);
  sendPlayersUpdate();
}

// –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ - –∫–∞–∂–¥—ã–π –∏–≥—Ä–æ–∫ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –æ–¥–Ω—É –æ—Ç–∫—Ä—ã—Ç—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
function handleRestart(allConnections) {
  allConnections.forEach(player => {
    if (player && player.characteristics) {
      const openCharacteristics = Object.keys(player.characteristics).filter(
        key => player.characteristics[key] && player.characteristics[key].revealed
      );
      
      if (openCharacteristics.length > 0) {
        const randomKey = openCharacteristics[Math.floor(Math.random() * openCharacteristics.length)];
        const categoryData = propertiesData.propertiesCategory.find(cat => cat.category === randomKey);
        
        if (categoryData && categoryData.items.length > 0) {
          const randomIndex = Math.floor(Math.random() * categoryData.items.length);
          const selectedItem = categoryData.items[randomIndex];
          
          player.characteristics[randomKey].value = selectedItem.value;
          player.characteristics[randomKey].description = selectedItem.description || null;
          console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: ${randomKey}`);
        }
      }
    }
  });
  
  sendPlayersUpdate();
}

// –ò—Å–ø–æ–≤–µ–¥—å - –∏–≥—Ä–æ–∫ —Å–∞–º —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É
function handleConfession(playerIds, characteristic, allConnections) {
  if (!playerIds || playerIds.length !== 1 || !characteristic) return;
  
  const player = allConnections.find(p => p && p.id === playerIds[0]);
  if (!player || !player.characteristics || !player.characteristics[characteristic]) return;
  
  player.characteristics[characteristic].revealed = true;
  console.log(`üìñ –ò—Å–ø–æ–≤–µ–¥—å: —Ä–∞—Å–∫—Ä—ã—Ç–∞ ${characteristic}`);
  
  sendPlayersUpdate();
}

// –ì–µ–Ω–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è - –ø–æ–º–µ–Ω—è—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ –∏–ª–∏ —Ñ–æ–±–∏—é
function handleGeneTherapy(playerIds, characteristic, allConnections) {
  if (!playerIds || playerIds.length !== 1 || !characteristic) return;
  
  const player = allConnections.find(p => p && p.id === playerIds[0]);
  if (!player || !player.characteristics) return;
  
  if (characteristic === 'health' || characteristic === 'fobia') {
    const categoryData = propertiesData.propertiesCategory.find(cat => cat.category === characteristic);
    if (categoryData && categoryData.items.length > 0) {
      const randomIndex = Math.floor(Math.random() * categoryData.items.length);
      const selectedItem = categoryData.items[randomIndex];
      const wasRevealed = player.characteristics[characteristic] ? player.characteristics[characteristic].revealed : false;
      
      player.characteristics[characteristic] = {
        value: selectedItem.value,
        description: selectedItem.description || null,
        experience: selectedItem.experience || null,
        revealed: wasRevealed
      };
      console.log(`üß¨ –ì–µ–Ω–Ω–∞—è —Ç–µ—Ä–∞–ø–∏—è: ${characteristic}`);
    }
  }
  
  sendPlayersUpdate();
}

// –ù–∞—Å–ª–µ–¥–∏–µ - –ø—Ä–æ—Ñ–µ—Å—Å–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∏–≥—Ä–æ–∫—É —Å–ø—Ä–∞–≤–∞
function handleLegacy(playerIds, allConnections) {
  if (!playerIds || playerIds.length !== 1) return;
  console.log(`üèõÔ∏è –ù–∞—Å–ª–µ–¥–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ`);
  sendPlayersUpdate();
}

// –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π —Ñ–∞–Ω–∞—Ç–∏–∑–º - –º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –æ–¥–Ω–æ —Ä–µ—à–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
function handleReligiousFanaticism(playerIds, allConnections) {
  if (!playerIds || playerIds.length !== 1) return;
  
  const player = allConnections.find(p => p && p.id === playerIds[0]);
  if (!player) return;
  
  player.hasProphetPower = true;
  console.log(`‚úùÔ∏è –†–µ–ª–∏–≥–∏–æ–∑–Ω—ã–π —Ñ–∞–Ω–∞—Ç–∏–∑–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω`);
  
  sendPlayersUpdate();
}

// –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ
function handleExperimentalTreatment(playerIds, allConnections) {
  if (!playerIds || playerIds.length !== 1) return;
  
  const player = allConnections.find(p => p && p.id === playerIds[0]);
  if (!player || !player.characteristics) return;
  
  const healed = Math.random() < 0.5;
  
  if (!healed) {
    const fobiaData = propertiesData.propertiesCategory.find(cat => cat.category === 'fobia');
    if (fobiaData && fobiaData.items.length > 0) {
      const randomIndex = Math.floor(Math.random() * fobiaData.items.length);
      const selectedFobia = fobiaData.items[randomIndex];
      const wasRevealed = player.characteristics.fobia ? player.characteristics.fobia.revealed : false;
      
      player.characteristics.fobia = {
        value: selectedFobia.value,
        description: selectedFobia.description || null,
        experience: selectedFobia.experience || null,
        revealed: wasRevealed
      };
    }
  }
  
  console.log(`üíä –≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ: ${healed ? '–≤—ã–ª–µ—á–µ–Ω' : '–Ω–æ–≤–∞—è —Ñ–æ–±–∏—è'}`);
  sendPlayersUpdate();
}

// ============================
// üì° –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
// ============================
function broadcast(data, excludeWs = null) {
  const msg = JSON.stringify(data);
  const clients = [...allPlayers, host].filter(p => p && p.readyState === WebSocket.OPEN);
  
  clients.forEach((client) => {
    if (client !== excludeWs && client.readyState === WebSocket.OPEN) {
      try {
        client.send(msg);
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", error);
      }
    }
  });
}

// ============================
// üîÅ –û—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –≤—Å–µ–º
// ============================
function sendPlayersUpdate() {
  const activePlayers = allPlayers.filter(p => p.readyState === WebSocket.OPEN);
  const activeHost = host && host.readyState === WebSocket.OPEN ? host : null;

  const playersList = [...activePlayers];
  if (activeHost) {
    playersList.push(activeHost);
  }

  const readyCount = playersList.filter((p) => p.ready).length;
  const totalPlayers = playersList.length;

  console.log("üì§ –ò–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω:", activePlayers.length, "–ì–æ—Ç–æ–≤—ã—Ö:", readyCount);

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º: –∏–≥—Ä–æ–∫–∞–º, –≤–µ–¥—É—â–µ–º—É –∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞)
  const allConnections = [...playersList];
  if (adminPanel && adminPanel.readyState === WebSocket.OPEN) {
    adminPanel.send(JSON.stringify({
      type: "players_update",
      players: playersList.map((p) => ({
        id: p.id,
        name: p.name,
        ready: p.ready,
        role: p.role,
        characteristics: p.characteristics || null,
        mirrorCamera: p.mirrorCamera || false
      })),
      readyCount,
      totalPlayers,
      regularPlayers: activePlayers.length,
      maxRegularPlayers: MAX_PLAYERS,
      hostConnected: !!activeHost,
      hostReady: activeHost ? activeHost.ready : false,
      gameStarted: gameState.started,
      gameStartTime: gameState.startTime,
      gameElapsedTime: gameState.started && gameState.startTime ? Date.now() - gameState.startTime : 0,
      gameReady: gameState.ready,
      currentRound: gameState.currentRound,
      totalRounds: gameState.totalRounds,
      highlightedPlayerId: highlightedPlayerId,
      votingActive: votingState.phase === "voting",
      votingPhase: votingState.phase, // "selection" | "voting" | null
      votingCandidates: Array.from(votingState.candidates), // –ú–∞—Å—Å–∏–≤ ID –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      votedPlayers: Array.from(votingState.votes.keys()), // –°–ø–∏—Å–æ–∫ ID –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
      voteCounts: votingState.voteCounts // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
    }));
  }

  broadcast({
    type: "players_update",
    players: playersList.map((p) => ({
        id: p.id,
        name: p.name,
        ready: p.ready,
        role: p.role,
        characteristics: p.characteristics || null,
        mirrorCamera: p.mirrorCamera || false
      })),
    readyCount,
    totalPlayers,
    regularPlayers: activePlayers.length,
    maxRegularPlayers: MAX_PLAYERS,
    hostConnected: !!activeHost,
    hostReady: activeHost ? activeHost.ready : false,
    gameStarted: gameState.started,
    gameStartTime: gameState.startTime,
    gameElapsedTime: gameState.started && gameState.startTime ? Date.now() - gameState.startTime : 0,
      gameReady: gameState.ready,
      currentRound: gameState.currentRound,
      totalRounds: gameState.totalRounds,
      highlightedPlayerId: highlightedPlayerId,
      votingActive: votingState.phase === "voting",
      votingPhase: votingState.phase, // "selection" | "voting" | null
      votingCandidates: Array.from(votingState.candidates), // –ú–∞—Å—Å–∏–≤ ID –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      votedPlayers: Array.from(votingState.votes.keys()), // –°–ø–∏—Å–æ–∫ ID –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–≤—à–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
      voteCounts: votingState.voteCounts // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
  });
}

// ============================
// üó≥Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
// ============================
function checkVotingComplete() {
  if (votingState.phase !== "voting") return;
  
  const activePlayers = allPlayers.filter(p => 
    p.readyState === WebSocket.OPEN && 
    p.role !== "host" &&
    p.ready &&
    !bannedPlayers.has(p.id) // –ò—Å–∫–ª—é—á–∞–µ–º –∏–∑–≥–Ω–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  );
  
  // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç, –∏—Å–∫–ª—é—á–∞–µ–º –µ–≥–æ –∏–∑ —Å–ø–∏—Å–∫–∞ —Ç–µ—Ö, –∫—Ç–æ –¥–æ–ª–∂–µ–Ω –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
  // (—Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –≥–æ–ª–æ—Å –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è)
  const votersToCheck = votingState.candidates.size === 1
    ? activePlayers.filter(p => !votingState.candidates.has(p.id))
    : activePlayers;
  
  // –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ (–∫—Ä–æ–º–µ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω –æ–¥–∏–Ω) –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
  const allVoted = votersToCheck.length > 0 && 
    votersToCheck.every(p => votingState.votes.has(p.id));
  
  if (allVoted && votersToCheck.length > 0) {
    console.log(`üó≥Ô∏è –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏. –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...`);
    
    // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)
    const candidateVotes = Object.entries(votingState.voteCounts)
      .filter(([playerId]) => votingState.candidates.has(playerId));
    const maxVotes = candidateVotes.length > 0 
      ? Math.max(...candidateVotes.map(([, count]) => count), 0)
      : 0;
    
    // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≥–Ω–∞–Ω
    const isSingleCandidate = votingState.candidates.size === 1;
    
    if (maxVotes === 0 || (isSingleCandidate && maxVotes > 0)) {
      // –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤ –ò–õ–ò –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–∞ (–Ω–æ –µ–≥–æ –≥–æ–ª–æ—Å –Ω–µ —É—á–∏—Ç—ã–≤–∞–ª—Å—è)
      // –í —Å–ª—É—á–∞–µ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É (—Ö–æ—Å—Ç —Ä–µ—à–∞–µ—Ç)
      if (isSingleCandidate && maxVotes > 0) {
        // –ù–∞—Ö–æ–¥–∏–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        const candidateId = Array.from(votingState.candidates)[0];
        const allConnections = [...allPlayers, host];
        const candidate = allConnections.find(p => p && p.id === candidateId);
        
        if (candidate) {
          const candidates = [{
            id: candidateId,
            name: candidate.name,
            votes: maxVotes
          }];
          
          // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          const allVotingResults = candidates.map(c => ({
            id: c.id,
            name: c.name,
            votes: c.votes
          }));
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
          const historyEntry = {
            timestamp: Date.now(),
            results: allVotingResults,
            candidates: candidates
          };
          votingHistory.push(historyEntry);
          
          votingState.phase = null;
          const candidatesList = Array.from(votingState.candidates);
          votingState.candidates.clear();
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö–æ—Å—Ç—É –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏—è
          const hostConnection = allPlayers.find(p => p.role === "host" && p.readyState === WebSocket.OPEN) || host;
          if (hostConnection) {
            hostConnection.send(JSON.stringify({
              type: "voting_tie",
              message: `–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–∞–Ω–¥–∏–¥–∞—Ç: ${candidate.name} (${maxVotes} –≥–æ–ª–æ—Å(–æ–≤)). –í–∞—à –≥–æ–ª–æ—Å –Ω–µ —É—á–∏—Ç—ã–≤–∞–ª—Å—è.`,
              candidates: candidates,
              allResults: allVotingResults
            }));
          }
          
          broadcast({
            type: "voting_completed",
            message: `–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã–ª–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ö–∞–Ω–¥–∏–¥–∞—Ç: ${candidate.name} (${maxVotes} –≥–æ–ª–æ—Å(–æ–≤)).`,
            candidates: candidates,
            allResults: allVotingResults
          });
          
          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
          votingState.votes.clear();
          votingState.voteCounts = {};
          sendPlayersUpdate();
          return;
        }
      }
      
      // –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤
      votingState.phase = null;
      votingState.candidates.clear();
      
      // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã)
      const allConnections = [...allPlayers, host];
      const allVotingResults = Array.from(votingState.candidates)
        .map(candidateId => {
          const player = allConnections.find(p => p && p.id === candidateId);
          return player ? {
            id: candidateId,
            name: player.name,
            votes: 0
          } : null;
        })
        .filter(p => p !== null)
        .sort((a, b) => b.votes - a.votes);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      const historyEntry = {
        timestamp: Date.now(),
        results: allVotingResults,
        candidates: []
      };
      votingHistory.push(historyEntry);
      
      broadcast({
        type: "voting_completed",
        message: "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã–ª–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤.",
        candidates: [],
        allResults: allVotingResults
      });
    } else {
      // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ–ª–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ —Å—Ä–µ–¥–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)
      const candidates = Object.entries(votingState.voteCounts)
        .filter(([playerId, count]) => count === maxVotes && votingState.candidates.has(playerId))
        .map(([playerId]) => {
          const allConnections = [...allPlayers, host];
          const player = allConnections.find(p => p && p.id === playerId);
          return player ? { id: playerId, name: player.name, votes: maxVotes } : null;
        })
        .filter(p => p !== null);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–æ –æ—á–∏—Å—Ç–∫–∏
      const candidatesList = Array.from(votingState.candidates);
      
      votingState.phase = null;
      votingState.candidates.clear();
      
      console.log(`üó≥Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è: ${candidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç(–æ–≤) —Å ${maxVotes} –≥–æ–ª–æ—Å(–∞–º–∏)`);
      
      // –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã)
      const allConnections = [...allPlayers, host];
      const allVotingResults = candidatesList
        .map(candidateId => {
          const player = allConnections.find(p => p && p.id === candidateId);
          return player ? {
            id: candidateId,
            name: player.name,
            votes: votingState.voteCounts[candidateId] || 0
          } : null;
        })
        .filter(p => p !== null)
        .sort((a, b) => b.votes - a.votes);
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
      const historyEntry = {
        timestamp: Date.now(),
        results: allVotingResults,
        candidates: candidates
      };
      votingHistory.push(historyEntry);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
      let resultMessage = "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã–ª–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ. ";
      if (maxVotes === 0) {
        resultMessage += "–ù–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª –≥–æ–ª–æ—Å–æ–≤.";
      } else if (candidates.length === 1) {
        resultMessage += `–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–∞ –≤—ã–ª–µ—Ç: ${candidates[0].name} (${maxVotes} –≥–æ–ª–æ—Å(–æ–≤)).`;
      } else if (candidates.length > 1) {
        resultMessage += `–ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ –≤—ã–ª–µ—Ç: ${candidates.map(c => `${c.name} (${c.votes} –≥–æ–ª–æ—Å(–æ–≤))`).join(', ')}.`;
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ–º
      broadcast({
        type: "voting_completed",
        message: resultMessage,
        candidates: candidates,
        allResults: allVotingResults
      });
      
      // –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ - —Ö–æ—Å—Ç –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å
      if (candidates.length > 1) {
        const hostConnection = allPlayers.find(p => p.role === "host" && p.readyState === WebSocket.OPEN) || host;
        if (hostConnection) {
          hostConnection.send(JSON.stringify({
            type: "voting_tie",
            message: "–ù–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ—Å–æ–≤",
            candidates: candidates,
            allResults: allVotingResults
          }));
        }
      } else if (candidates.length === 1) {
        // –ï—Å–ª–∏ –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–∑–≥–æ–Ω—è–µ–º
        bannedPlayers.add(candidates[0].id);
        console.log(`üö™ –ò–≥—Ä–æ–∫ ${candidates[0].name} –∏–∑–≥–Ω–∞–Ω –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è`);
        sendPlayersUpdate();
      }
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
    votingState.votes.clear();
    votingState.voteCounts = {};
    sendPlayersUpdate();
  }
}

// ============================
// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º: –≤—Å–µ –ª–∏ –≥–æ—Ç–æ–≤—ã, –∏ –º–æ–∂–Ω–æ –ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–∞—Ç—å
// ============================
function checkAllReady() {
  const activePlayers = allPlayers.filter(p => p.readyState === WebSocket.OPEN);
  const activeHost = host && host.readyState === WebSocket.OPEN ? host : null;

  if (!activeHost || !activeHost.ready) {
    if (gameState.started) {
      gameState.started = false;
      gameState.startTime = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –µ—Å–ª–∏ –∏–≥—Ä–∞ –±—ã–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
      gameState.ready = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    }
    return;
  }

  const playersList = [...activePlayers, activeHost];
  const allReady = playersList.length > 1 && playersList.every((p) => p.ready);

  if (allReady && !gameState.started) {
    gameState.started = true;
    gameState.startTime = Date.now(); // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
    gameState.ready = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å (–∞–¥–º–∏–Ω –µ—â–µ –Ω–µ –Ω–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å")
    gameState.currentRound = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞—É–Ω–¥ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    console.log("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    generateAllPlayerCards();
    
    broadcast({ 
      type: "game_started",
      message: "–ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è! –ö–∞—Ä—Ç—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–µ–æ—Å–≤—è–∑—å..."
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
    sendPlayersUpdate();
    
    // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    setTimeout(() => {
      broadcast({
        type: "game_message", 
        message: "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∏–¥–µ–æ –∏ –∞—É–¥–∏–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"
      });
    }, 3000);
  }
}

// ============================
// üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∏–≥—Ä–æ–∫—É
// ============================
function sendToPlayer(playerId, data) {
  const allConnections = [...allPlayers, host];
  const targetPlayer = allConnections.find(p => p && p.id === playerId && p.readyState === WebSocket.OPEN);
  
  if (targetPlayer) {
    try {
      targetPlayer.send(JSON.stringify(data));
      return true;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–≥—Ä–æ–∫—É ${playerId}:`, error);
      return false;
    }
  }
  return false;
}

// ============================
// üß† –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
// ============================
wss.on("connection", (ws) => {
  ws.id = Date.now().toString(36) + Math.random().toString(36).slice(2);
  ws.name = null;
  ws.role = "player";
  ws.ready = false;

  console.log("üîå –ù–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:", ws.id);

  // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  ws.send(JSON.stringify({
    type: "welcome",
    yourId: ws.id,
    message: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
  }));

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  sendPlayersUpdate();

  ws.on("message", (message) => {
    try {
      const data = JSON.parse(message);

      switch (data.type) {
        // üéõÔ∏è –í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å (–æ—Ç–¥–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –Ω–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∏–≥—Ä–æ–∫–æ–º)
        case "join_admin_panel": {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–Ω—è—Ç–∞ –ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
          if (adminPanel && adminPanel.readyState === WebSocket.OPEN) {
            ws.send(JSON.stringify({ 
              type: "error", 
              message: "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–∂–µ –∑–∞–Ω—è—Ç–∞" 
            }));
            return;
          }
          
          // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–æ–ª—å –∞–¥–º–∏–Ω–∞
          ws.role = "admin_panel";
          ws.name = "admin_panel";
          adminPanel = ws;
          
          console.log(`üéõÔ∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏`);
          
          ws.send(JSON.stringify({ 
            type: "joined_as_admin", 
            id: ws.id,
            message: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
          }));
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
          sendPlayersUpdate();
          break;
        }

        // üëã –ò–≥—Ä–æ–∫ –≤–æ—à—ë–ª
        case "join": {
          const nickname = (data.name || "").trim();
          
          if (!nickname) {
            ws.send(JSON.stringify({ type: "error", message: "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º" }));
            return;
          }

          if (nickname.length > 24) {
            ws.send(JSON.stringify({ type: "error", message: "–ù–∏–∫–Ω–µ–π–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π" }));
            return;
          }

          // –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ —É–∂–µ –µ—Å—Ç—å –∏–º—è (–∏–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∏–∫–Ω–µ–π–º–∞)
          if (ws.name) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–Ω—è—Ç –ª–∏ –Ω–æ–≤—ã–π –Ω–∏–∫–Ω–µ–π–º
            const activePlayers = [...allPlayers, host].filter(p => p && p.readyState === WebSocket.OPEN);
            const existingPlayer = activePlayers.find(p => p.name && p.name.toLowerCase() === nickname.toLowerCase() && p.id !== ws.id);
            
            if (existingPlayer) {
              ws.send(JSON.stringify({ type: "error", message: "–ù–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç" }));
              return;
            }
            
            if (ws.name !== nickname) {
              ws.name = nickname;
              sendPlayersUpdate();
            }
            return;
          }

          // üîÑ –°–ù–ê–ß–ê–õ–ê: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)
          const disconnectedData = disconnectedPlayers.get(nickname.toLowerCase());
          let isReconnecting = false;
          
          if (disconnectedData && gameState.started) {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
            console.log(`üîÑ –ò–≥—Ä–æ–∫ ${nickname} –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ...`);
            isReconnecting = true;
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π WebSocket, –Ω–æ —Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            ws.name = nickname;
            ws.characteristics = disconnectedData.characteristics ? JSON.parse(JSON.stringify(disconnectedData.characteristics)) : null;
            ws.ready = disconnectedData.ready || false;
            ws.role = disconnectedData.role || "player";
            ws.mirrorCamera = disconnectedData.mirrorCamera || false;
            
            // –ü–æ–º–µ—á–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–ª–∏—Å—å
            if (ws.characteristics) {
              markPlayerCardsAsUsed(ws.characteristics);
              console.log(`üìù –ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ ${nickname} –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ`);
            }
            
            // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö
            disconnectedPlayers.delete(nickname.toLowerCase());
            
            console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${nickname}:`, {
              hasCharacteristics: !!ws.characteristics,
              characteristicsCount: ws.characteristics ? Object.keys(ws.characteristics).length : 0
            });
          } else {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã –∏–º–µ–Ω —Å—Ä–µ–¥–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)
            const activePlayers = [...allPlayers, host].filter(p => p && p.readyState === WebSocket.OPEN);
            const existingPlayer = activePlayers.find(p => p.name && p.name.toLowerCase() === nickname.toLowerCase());
            
            if (existingPlayer && existingPlayer.id !== ws.id) {
              ws.send(JSON.stringify({ type: "error", message: "–ù–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç" }));
              return;
            }
            
            // –û–±—ã—á–Ω—ã–π –≤—Ö–æ–¥ - –ø—Ä–æ—Å—Ç–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è
            ws.name = nickname;
          }

          // üéô –í–µ–¥—É—â–∏–π (—Ç–æ–ª—å–∫–æ millisana, host, –≤–µ–¥—É—â–∏–π - –ù–ï admin!)
          if (["millisana", "host", "–≤–µ–¥—É—â–∏–π"].includes(nickname.toLowerCase())) {
            if (host && host.readyState === WebSocket.OPEN && host.id !== ws.id) {
              ws.send(JSON.stringify({ type: "error", message: "–í–µ–¥—É—â–∏–π —É–∂–µ –µ—Å—Ç—å" }));
              return;
            }
            
            ws.role = "host";
            host = ws;
            console.log(`üéô –í–µ–¥—É—â–∏–π: ${ws.name}${isReconnecting ? ' (–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)' : ''}`);
            
            ws.send(JSON.stringify({ 
              type: "joined_as_host", 
              id: ws.id,
              isReconnecting: isReconnecting
            }));
            
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–∏–º
            if (gameState.started) {
              console.log(`üéÆ –í–µ–¥—É—â–∏–π –∑–∞—Ö–æ–¥–∏—Ç –≤ —É–∂–µ –Ω–∞—á–∞—Ç—É—é –∏–≥—Ä—É`);
              
              // –ï—Å–ª–∏ —É —Ö–æ—Å—Ç–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ–Ω –≤—ã—à–µ–ª –∏ –≤–µ—Ä–Ω—É–ª—Å—è), –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö
              if (!ws.characteristics) {
                console.log(`üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –≤–µ–¥—É—â–µ–≥–æ (–∑–∞—Ö–æ–¥ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã)`);
                ws.characteristics = generatePlayerCharacteristics();
                // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
                markPlayerCardsAsUsed(ws.characteristics);
              }
              
              ws.send(JSON.stringify({
                type: "game_started",
                message: "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç–µ—Å—å"
              }));
              // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –¥–ª—è —Ö–æ—Å—Ç–∞
              ws.ready = true;
              // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
              sendPlayersUpdate();
            }
            
          } else {
            // üë§ –û–±—ã—á–Ω—ã–π –∏–≥—Ä–æ–∫
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö, –¥–æ–±–∞–≤–ª—è–µ–º
            if (!allPlayers.includes(ws)) {
              const activeRegularPlayers = allPlayers.filter(p => p.readyState === WebSocket.OPEN);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å (–≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã –º–æ–∂–Ω–æ –∑–∞—Ö–æ–¥–∏—Ç—å –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∏ –Ω–æ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤)
              if (activeRegularPlayers.length >= MAX_PLAYERS && !isReconnecting && !gameState.started) {
                ws.send(JSON.stringify({ 
                  type: "error", 
                  message: `–õ–æ–±–±–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ (–º–∞–∫—Å–∏–º—É–º ${MAX_PLAYERS} –∏–≥—Ä–æ–∫–æ–≤)` 
                }));
                return;
              }

              allPlayers.push(ws);
            }
            
            console.log(`üë§ –ò–≥—Ä–æ–∫: ${ws.name}${isReconnecting ? ' (–ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ)' : ''}`);
            
            ws.send(JSON.stringify({ 
              type: "joined_as_player", 
              id: ws.id,
              isReconnecting: isReconnecting
            }));
            
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (gameState.started) {
              console.log(`üéÆ –ò–≥—Ä–æ–∫ ${ws.name} –∑–∞—Ö–æ–¥–∏—Ç –≤ —É–∂–µ –Ω–∞—á–∞—Ç—É—é –∏–≥—Ä—É`);
              
              // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ (–∑–∞—Ö–æ–¥–∏—Ç –≤–ø–µ—Ä–≤—ã–µ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã), –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Ö
              if (!isReconnecting && !ws.characteristics) {
                console.log(`üé≤ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${ws.name} (–∑–∞—Ö–æ–¥ –≤–æ –≤—Ä–µ–º—è –∏–≥—Ä—ã)`);
                ws.characteristics = generatePlayerCharacteristics();
                // –ü–æ–º–µ—á–∞–µ–º –∫–∞—Ä—Ç—ã –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ
                markPlayerCardsAsUsed(ws.characteristics);
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ä–∞–∑—É
                sendPlayersUpdate();
              }
              
              // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
              if (isReconnecting) {
                sendPlayersUpdate();
              }
              
              // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞ (–∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å"), –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."
              if (gameState.ready) {
                ws.send(JSON.stringify({
                  type: "game_ready",
                  message: "–ò–≥—Ä–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å"
                }));
              } else {
                ws.send(JSON.stringify({
                  type: "game_started",
                  message: "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å, –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è"
                }));
              }
            }
          }

          sendPlayersUpdate();
          
          // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –Ω–æ–≤–æ–º –∏–≥—Ä–æ–∫–µ –¥–ª—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ WebRTC
          broadcast({
            type: "new_player_joined",
            playerId: ws.id,
            playerName: ws.name
          }, ws);
          
          break;
        }

        // ‚úÖ –ò–≥—Ä–æ–∫ –Ω–∞–∂–∞–ª "–≥–æ—Ç–æ–≤"
        case "set_ready": {
          if (!ws.name) {
            ws.send(JSON.stringify({ type: "error", message: "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º" }));
            return;
          }

          ws.ready = data.ready;
          console.log(`‚úÖ ${ws.name}: ${data.ready ? '–≥–æ—Ç–æ–≤' : '–Ω–µ –≥–æ—Ç–æ–≤'}`);

          ws.send(JSON.stringify({
            type: "ready_status",
            ready: data.ready
          }));

          // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å –∏ –∏–≥—Ä–æ–∫ —Å—Ç–∞–ª –≥–æ—Ç–æ–≤, —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
          if (data.ready && gameState.started) {
            console.log(`üéÆ –ò–≥—Ä–æ–∫ ${ws.name} –≥–æ—Ç–æ–≤ –∏ –∏–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ`);
            // –ï—Å–ª–∏ –∏–≥—Ä–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞ (–∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å"), –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ..."
            if (gameState.ready) {
              ws.send(JSON.stringify({
                type: "game_ready",
                message: "–ò–≥—Ä–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞"
              }));
            } else {
              ws.send(JSON.stringify({
                type: "game_started",
                message: "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å"
              }));
            }
          }

          sendPlayersUpdate();
          checkAllReady();
          break;
        }

        // üìä –ó–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ª–æ–±–±–∏
        case "get_lobby_state": {
          sendPlayersUpdate();
          break;
        }


        // üì° WebRTC —Å–∏–≥–Ω–∞–ª—ã - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        case "signal": {
          if (!data.targetId || !data.signal) {
            ws.send(JSON.stringify({ type: "error", message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Å–∏–≥–Ω–∞–ª" }));
            return;
          }

          // –ù–∞—Ö–æ–¥–∏–º —Ü–µ–ª–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
          const targetPlayer = [...allPlayers, host].find(p => 
            p && p.id === data.targetId && p.readyState === WebSocket.OPEN
          );
          
          if (!targetPlayer) {
            console.log(`‚ùå –¶–µ–ª–µ–≤–æ–π –∏–≥—Ä–æ–∫ ${data.targetId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            ws.send(JSON.stringify({ type: "error", message: "–ò–≥—Ä–æ–∫ –Ω–µ –≤ —Å–µ—Ç–∏" }));
            return;
          }

          // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–∏–≥–Ω–∞–ª —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
          const success = sendToPlayer(data.targetId, {
            type: "signal",
            fromId: ws.id,
            fromName: ws.name,
            signal: data.signal,
            timestamp: Date.now()
          });

          if (success) {
            const signalType = data.signal.type || 'ice-candidate';
            console.log(`üì° ${signalType} –æ—Ç ${ws.name} –∫ ${targetPlayer.name}`);
          }
          break;
        }

        // üîç –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫—É WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        case "refresh_connections": {
          console.log(`üîÑ ${ws.name} –∑–∞–ø—Ä–æ—Å–∏–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ WebRTC —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π`);
          broadcast({
            type: "refresh_connections_request",
            from: ws.id
          }, ws);
          break;
        }

        // üí¨ –ß–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        case "chat_message": {
          if (data.message) {
            broadcast({
              type: "chat_message",
              from: ws.id,
              fromName: ws.name,
              message: data.message,
              timestamp: Date.now()
            }, ws);
          }
          break;
        }

        // üé≤ –ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç –∏–≥—Ä–æ–∫–∞
        case "get_player_cards": {
          const targetPlayerId = data.playerId;
          const allConnections = [...allPlayers, host];
          const targetPlayer = allConnections.find(p => p && p.id === targetPlayerId && p.readyState === WebSocket.OPEN);
          
          if (targetPlayer && targetPlayer.characteristics) {
            ws.send(JSON.stringify({
              type: "player_cards",
              playerId: targetPlayerId,
              playerName: targetPlayer.name,
              cards: targetPlayer.characteristics
            }));
          } else {
            ws.send(JSON.stringify({ type: "error", message: "–ö–∞—Ä—Ç—ã –∏–≥—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" }));
          }
          break;
        }

        // üëÅÔ∏è –†–∞—Å–∫—Ä—ã—Ç–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
        case "reveal_characteristic": {
          const targetPlayerId = data.playerId;
          const characteristicType = data.characteristicType;
          const allConnections = [...allPlayers, host];
          const targetPlayer = allConnections.find(p => p && p.id === targetPlayerId && p.readyState === WebSocket.OPEN);
          
          if (targetPlayer && targetPlayer.characteristics && targetPlayer.characteristics[characteristicType]) {
            targetPlayer.characteristics[characteristicType].revealed = true;
            
            broadcast({
              type: "characteristic_revealed",
              playerId: targetPlayerId,
              playerName: targetPlayer.name,
              characteristicType: characteristicType,
              characteristic: targetPlayer.characteristics[characteristicType]
            });
            
            sendPlayersUpdate();
          } else {
            ws.send(JSON.stringify({ type: "error", message: "–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" }));
          }
          break;
        }

        // ‚ö° –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä—Ç –¥–µ–π—Å—Ç–≤–∏–π
        case "execute_action_card": {
          const actionType = data.actionType;
          const parameters = data.parameters;
          const allConnections = [...allPlayers, host];
          
          console.log(`‚ö° –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∫–∞—Ä—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${actionType}`);
          
          // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–π –∫–∞—Ä—Ç—ã
          handleActionCard(actionType, parameters, allConnections);
          break;
        }

        // üö´ –ò–∑–≥–Ω–∞–Ω–∏–µ/–≤–æ–∑–≤—Ä–∞—Ç –∏–≥—Ä–æ–∫–∞
        case "toggle_ban_player": {
          if (ws.role === "host") {
            const targetPlayerId = data.playerId;
            const allConnections = [...allPlayers, host];
            const targetPlayer = allConnections.find(p => p && p.id === targetPlayerId);
            
            if (targetPlayer && bannedPlayers.has(targetPlayerId)) {
              // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞
              bannedPlayers.delete(targetPlayerId);
              console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${targetPlayer.name} –≤–æ–∑–≤—Ä–∞—â–µ–Ω –≤ –∏–≥—Ä—É`);
            } else if (targetPlayer) {
              // –ò–∑–≥–æ–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞
              bannedPlayers.add(targetPlayerId);
              console.log(`üö´ –ò–≥—Ä–æ–∫ ${targetPlayer.name} –∏–∑–≥–Ω–∞–Ω`);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º
            broadcast({
              type: "player_banned",
              playerId: targetPlayerId,
              banned: bannedPlayers.has(targetPlayerId)
            });
            
            sendPlayersUpdate();
          }
          break;
        }

        // ü¶µ –ö–∏–∫ –∏–≥—Ä–æ–∫–∞ –∞–¥–º–∏–Ω–æ–º –ø–∞–Ω–µ–ª–∏ (–±–µ–∑ –±–∞–Ω–∞, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–∏—Ç—å)
        case "kick_player": {
          // –†–∞–∑—Ä–µ—à–∞–µ–º –∫–∏–∫ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –≤–µ–¥—É—â–µ–º—É
          if (ws.role === "admin_panel" || ws.role === "host") {
            const targetPlayerId = data.playerId;
            const allConnections = [...allPlayers, host].filter(Boolean);
            const targetPlayer = allConnections.find(p => p && p.id === targetPlayerId);

            if (!targetPlayer) {
              ws.send(JSON.stringify({ type: "error", message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω" }));
              break;
            }
            if (targetPlayer.role === "host") {
              ws.send(JSON.stringify({ type: "error", message: "–ù–µ–ª—å–∑—è –∫–∏–∫–Ω—É—Ç—å –≤–µ–¥—É—â–µ–≥–æ" }));
              break;
            }

            try {
              // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ü–µ–ª—å, —á—Ç–æ –µ—ë –∫–∏–∫–Ω—É–ª–∏
              if (targetPlayer.readyState === WebSocket.OPEN) {
                targetPlayer.send(JSON.stringify({ type: "kicked", message: "–í—ã –±—ã–ª–∏ –∫–∏–∫–Ω—É—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è." }));
              }
            } catch (e) {
              console.warn("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∏–∫–µ:", e);
            }

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ; –µ—Å–ª–∏ –∏–≥—Ä–∞ –∏–¥—ë—Ç, onclose —Å–æ—Ö—Ä–∞–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            try {
              targetPlayer.close(4000, "Kicked by admin");
            } catch (_) {}

            // –°–æ–æ–±—â–∞–µ–º –≤—Å–µ–º
            broadcast({
              type: "player_kicked",
              playerId: targetPlayerId,
              playerName: targetPlayer.name
            });
            sendPlayersUpdate();
          }
          break;
        }

        // ü™û –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–º–µ—Ä—ã
        case "set_mirror_camera": {
          if (!ws.name) {
            ws.send(JSON.stringify({ type: "error", message: "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º" }));
            return;
          }
          
          ws.mirrorCamera = data.mirror || false;
          console.log(`ü™û ${ws.name}: –∑–µ—Ä–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ ${ws.mirrorCamera ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`);
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º
          sendPlayersUpdate();
          break;
        }

        // ‚úÖ –ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—á–∞–ª—É (–∞–¥–º–∏–Ω –Ω–∞–∂–∞–ª "–ù–∞—á–∞—Ç—å")
        case "game_ready": {
          // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–µ–º—É
          if (ws.role === "host") {
            console.log("‚úÖ –ê–¥–º–∏–Ω –Ω–∞–∂–∞–ª '–ù–∞—á–∞—Ç—å', –∏–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞!");
            gameState.ready = true;
            
            broadcast({
              type: "game_ready",
              message: "–ò–≥—Ä–∞ –≥–æ—Ç–æ–≤–∞ –∫ –Ω–∞—á–∞–ª—É"
            });
            
            sendPlayersUpdate();
          } else {
            ws.send(JSON.stringify({ type: "error", message: "–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É" }));
          }
          break;
        }

        // üéØ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞—É–Ω–¥–æ–≤
        case "set_total_rounds": {
          // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–µ–º—É –∏–ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
          if (ws.role === "host" || ws.role === "admin_panel") {
            const newTotalRounds = parseInt(data.totalRounds) || 5;
            if (newTotalRounds < 1) {
              ws.send(JSON.stringify({ type: "error", message: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0" }));
              return;
            }
            gameState.totalRounds = newTotalRounds;
            console.log(`üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${newTotalRounds}`);
            sendPlayersUpdate();
          } else {
            ws.send(JSON.stringify({ type: "error", message: "–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –∏–ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –º–æ–≥—É—Ç —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞—É–Ω–¥–æ–≤" }));
          }
          break;
        }

        // üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
        case "change_round": {
          // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–µ–º—É –∏–ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
          if (ws.role === "host" || ws.role === "admin_panel") {
            const newRound = parseInt(data.round) || 1;
            if (newRound < 1 || newRound > gameState.totalRounds) {
              ws.send(JSON.stringify({ type: "error", message: `–†–∞—É–Ω–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ ${gameState.totalRounds}` }));
              return;
            }
            gameState.currentRound = newRound;
            console.log(`üîÑ –†–∞—É–Ω–¥ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${newRound}`);
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—É—é —Ä–∞–º–∫—É –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞—É–Ω–¥–∞
            if (highlightedPlayerId) {
              highlightedPlayerId = null;
              console.log(`üîÑ –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞—É–Ω–¥–∞`);
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞—É–Ω–¥–∞
            if (votingState.phase !== null) {
              votingState.phase = null;
              votingState.candidates.clear();
              votingState.votes.clear();
              votingState.voteCounts = {};
              console.log(`üîÑ –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞—É–Ω–¥–∞`);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–º–µ–Ω–µ —Ä–∞—É–Ω–¥–∞
            console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º round_changed –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º: —Ä–∞—É–Ω–¥ ${newRound}`);
            broadcast({
              type: "round_changed",
              round: newRound,
              totalRounds: gameState.totalRounds
            });
            console.log(`‚úÖ round_changed –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω`);
            
            sendPlayersUpdate();
          } else {
            ws.send(JSON.stringify({ type: "error", message: "–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –∏–ª–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –º–æ–≥—É—Ç –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç—å —Ä–∞—É–Ω–¥" }));
          }
          break;
        }

        // üó≥Ô∏è –ù–∞—á–∞–ª–æ —ç—Ç–∞–ø–∞ –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
        case "start_voting_selection": {
          // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–µ–º—É
          if (ws.role === "host") {
            if (votingState.phase !== null) {
              ws.send(JSON.stringify({ type: "error", message: "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ" }));
              return;
            }
            
            const activePlayers = allPlayers.filter(p => p.readyState === WebSocket.OPEN && p.role !== "host" && !bannedPlayers.has(p.id));
            if (activePlayers.length < 2) {
              ws.send(JSON.stringify({ type: "error", message: "–î–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –∏–≥—Ä–æ–∫–∞" }));
              return;
            }
            
            // –ù–∞—á–∏–Ω–∞–µ–º —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            votingState.phase = "selection";
            votingState.candidates.clear();
            votingState.votes.clear();
            votingState.voteCounts = {};
            
            console.log(`üó≥Ô∏è –ù–∞—á–∞–ª—Å—è —ç—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è`);
            
            sendPlayersUpdate();
          } else {
            ws.send(JSON.stringify({ type: "error", message: "–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –Ω–∞—á–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤" }));
          }
          break;
        }

        // üó≥Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (—Ö–æ—Å—Ç –≤—ã–±–∏—Ä–∞–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤)
        case "set_voting_candidates": {
          // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–µ–º—É
          if (ws.role === "host") {
            if (votingState.phase !== "selection") {
              ws.send(JSON.stringify({ type: "error", message: "–≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω" }));
              return;
            }
            
            const candidates = data.candidates || [];
            if (!Array.isArray(candidates)) {
              ws.send(JSON.stringify({ type: "error", message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤" }));
              return;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ –Ω–µ –∏–∑–≥–Ω–∞–Ω—ã
            const allConnections = [...allPlayers, host];
            const validCandidates = candidates.filter(candidateId => {
              const player = allConnections.find(p => p && p.id === candidateId);
              return player && player.role !== "host" && !bannedPlayers.has(candidateId);
            });
            
            votingState.candidates = new Set(validCandidates);
            
            console.log(`üó≥Ô∏è –•–æ—Å—Ç –≤—ã–±—Ä–∞–ª ${validCandidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è`);
            
            sendPlayersUpdate();
          } else {
            ws.send(JSON.stringify({ type: "error", message: "–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤" }));
          }
          break;
        }

        // üó≥Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –Ω–∞—á–∞–ª–æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        case "confirm_voting_candidates": {
          // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–µ–º—É
          if (ws.role === "host") {
            if (votingState.phase !== "selection") {
              ws.send(JSON.stringify({ type: "error", message: "–≠—Ç–∞–ø –≤—ã–±–æ—Ä–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω" }));
              return;
            }
            
            if (votingState.candidates.size < 1) {
              ws.send(JSON.stringify({ type: "error", message: "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞" }));
              return;
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —ç—Ç–∞–ø—É –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
            votingState.phase = "voting";
            votingState.votes.clear();
            votingState.voteCounts = {};
            
            console.log(`üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å —Å ${votingState.candidates.size} –∫–∞–Ω–¥–∏–¥–∞—Ç–∞–º–∏`);
            
            broadcast({
              type: "voting_started",
              message: "–ù–∞—á–∞–ª–æ—Å—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã–ª–µ—Ç",
              candidates: Array.from(votingState.candidates)
            });
            
            sendPlayersUpdate();
          } else {
            ws.send(JSON.stringify({ type: "error", message: "–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤" }));
          }
          break;
        }

        // üó≥Ô∏è –û—Ç–º–µ–Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è
        case "cancel_voting": {
          // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–µ–º—É
          if (ws.role === "host") {
            if (votingState.phase === null) {
              ws.send(JSON.stringify({ type: "error", message: "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ" }));
              return;
            }
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            votingState.phase = null;
            votingState.candidates.clear();
            votingState.votes.clear();
            votingState.voteCounts = {};
            
            console.log(`üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã–ª–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ`);
            
            broadcast({
              type: "voting_cancelled",
              message: "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞ –≤—ã–ª–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–æ –≤–µ–¥—É—â–∏–º"
            });
            
            sendPlayersUpdate();
          } else {
            ws.send(JSON.stringify({ type: "error", message: "–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ" }));
          }
          break;
        }

        // üó≥Ô∏è –ì–æ–ª–æ—Å –∏–≥—Ä–æ–∫–∞ –∑–∞ –≤—ã–ª–µ—Ç –¥—Ä—É–≥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        case "vote_to_kick": {
          if (votingState.phase !== "voting") {
            ws.send(JSON.stringify({ type: "error", message: "–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ" }));
            return;
          }
          
          // –•–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å
          if (ws.role === "host") {
            ws.send(JSON.stringify({ type: "error", message: "–•–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å" }));
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≥–æ–ª–æ—Å—É—é—â–∏–π –∏–≥—Ä–æ–∫ –Ω–µ –∏–∑–≥–Ω–∞–Ω
          if (bannedPlayers.has(ws.id)) {
            ws.send(JSON.stringify({ type: "error", message: "–ò–∑–≥–Ω–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –Ω–µ –º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å" }));
            return;
          }
          
          const targetPlayerId = data.targetPlayerId;
          if (!targetPlayerId) {
            ws.send(JSON.stringify({ type: "error", message: "–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–≥—Ä–æ–∫–∞" }));
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–ø–∏—Å–∫–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
          if (!votingState.candidates.has(targetPlayerId)) {
            ws.send(JSON.stringify({ type: "error", message: "–≠—Ç–æ—Ç –∏–≥—Ä–æ–∫ –Ω–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ" }));
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª
          if (votingState.votes.has(ws.id)) {
            ws.send(JSON.stringify({ type: "error", message: "–í—ã —É–∂–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏" }));
            return;
          }
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ü–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –∏–∑–≥–Ω–∞–Ω–∞
          const allConnections = [...allPlayers, host];
          const targetPlayer = allConnections.find(p => p && p.id === targetPlayerId);
          if (!targetPlayer || bannedPlayers.has(targetPlayerId)) {
            ws.send(JSON.stringify({ type: "error", message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∏–≥—Ä–æ–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è" }));
            return;
          }
          
          // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å
          votingState.votes.set(ws.id, targetPlayerId);
          
          // –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∫–∞–Ω–¥–∏–¥–∞—Ç –∏ –≥–æ–ª–æ—Å—É—é—â–∏–π - —ç—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç, –µ–≥–æ –≥–æ–ª–æ—Å –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
          const isSingleCandidate = votingState.candidates.size === 1;
          const voterIsCandidate = votingState.candidates.has(ws.id);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≥–æ–ª–æ—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≥–æ–ª–æ—Å –Ω–µ –æ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø—Ä–∏ –æ–¥–Ω–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–µ)
          if (!(isSingleCandidate && voterIsCandidate)) {
            if (!votingState.voteCounts[targetPlayerId]) {
              votingState.voteCounts[targetPlayerId] = 0;
            }
            votingState.voteCounts[targetPlayerId]++;
            console.log(`üó≥Ô∏è ${ws.name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –≤—ã–ª–µ—Ç ${targetPlayer.name}`);
          } else {
            console.log(`üó≥Ô∏è ${ws.name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª –∑–∞ –≤—ã–ª–µ—Ç ${targetPlayer.name}, –Ω–æ –µ–≥–æ –≥–æ–ª–æ—Å –Ω–µ —É—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è (–µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç)`);
          }
          
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º
          sendPlayersUpdate();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –ª–∏ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ (–≤—Å–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏)
          checkVotingComplete();
          break;
        }

        // üü¢ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–µ–ª–µ–Ω–æ–π —Ä–∞–º–∫–∏ –∏–≥—Ä–æ–∫–∞
        case "toggle_player_highlight": {
          // –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ –≤–µ–¥—É—â–µ–º—É
          if (ws.role === "host") {
            const targetPlayerId = data.playerId;
            
            if (!targetPlayerId) {
              ws.send(JSON.stringify({ type: "error", message: "–ù–µ —É–∫–∞–∑–∞–Ω ID –∏–≥—Ä–æ–∫–∞" }));
              return;
            }
            
            // –ï—Å–ª–∏ –Ω–∞–∂–∏–º–∞–µ–º –Ω–∞ —Ç–æ–≥–æ –∂–µ –∏–≥—Ä–æ–∫–∞ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
            if (highlightedPlayerId === targetPlayerId) {
              highlightedPlayerId = null;
              console.log(`üü¢ –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${targetPlayerId}`);
            } else {
              // –ò–Ω–∞—á–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É (–ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–æ—Å–∏—Ç—Å—è)
              highlightedPlayerId = targetPlayerId;
              console.log(`üü¢ –ó–µ–ª–µ–Ω–∞—è —Ä–∞–º–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${targetPlayerId}`);
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º
            sendPlayersUpdate();
          } else {
            ws.send(JSON.stringify({ type: "error", message: "–¢–æ–ª—å–∫–æ –≤–µ–¥—É—â–∏–π –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–æ–≤" }));
          }
          break;
        }

        // üîÑ –°–±—Ä–æ—Å –∏–≥—Ä—ã (–æ—á–∏—Å—Ç–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫)
        case "reset_game": {
          // –†–∞–∑—Ä–µ—à–∞–µ–º —Å–±—Ä–æ—Å —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É –ø–∞–Ω–µ–ª–∏ –∏–ª–∏ –≤–µ–¥—É—â–µ–º—É
          if (ws.role === "admin_panel" || ws.role === "host") {
            console.log("üîÑ –ê–¥–º–∏–Ω —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä—É...");
            gameState.started = false;
            gameState.startTime = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
            gameState.ready = false; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä—ã
            gameState.currentRound = 0; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–∞—É–Ω–¥
            highlightedPlayerId = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–µ–ª–µ–Ω—É—é —Ä–∞–º–∫—É
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ
            votingState.phase = null;
            votingState.candidates.clear();
            votingState.votes.clear();
            votingState.voteCounts = {};
            votingHistory = []; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            allPlayers.forEach(p => {
              p.ready = false;
              p.characteristics = null;
            });
            if (host) {
              host.ready = false;
              host.characteristics = null;
            }
            
            // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            disconnectedPlayers.clear();
            console.log("üóëÔ∏è –î–∞–Ω–Ω—ã–µ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ—á–∏—â–µ–Ω—ã");
            
            // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç
            usedCards = {};
            console.log("üóëÔ∏è –°–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç –æ—á–∏—â–µ–Ω");
            
            broadcast({
              type: "game_reset",
              message: "–ò–≥—Ä–∞ —Å–±—Ä–æ—à–µ–Ω–∞, –≤—Å–µ –∫–∞—Ä—Ç—ã –æ—á–∏—â–µ–Ω—ã"
            });
            
            sendPlayersUpdate();
            console.log("‚úÖ –ò–≥—Ä–∞ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω–∞");
          }
          break;
        }

        default:
          ws.send(JSON.stringify({ type: "error", message: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞" }));
      }
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
      ws.send(JSON.stringify({ type: "error", message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" }));
    }
  });

  // ‚ùå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
  ws.on("close", () => {
    console.log(`‚ùå –û—Ç–∫–ª—é—á–∏–ª—Å—è: ${ws.name || 'Unknown'} (${ws.role})`);
    
    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º (–µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å)
    // –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    if (ws.name && gameState.started && ws.role !== "admin_panel") {
      disconnectedPlayers.set(ws.name.toLowerCase(), {
        characteristics: ws.characteristics ? JSON.parse(JSON.stringify(ws.characteristics)) : null,
        ready: ws.ready || false,
        role: ws.role || "player",
        id: ws.id,
        mirrorCamera: ws.mirrorCamera || false,
        disconnectedAt: Date.now()
      });
      console.log(`üíæ –î–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞ ${ws.name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è`);
    }
    
    if (ws.role === "player") {
      allPlayers = allPlayers.filter((p) => p !== ws);
    } else if (ws.role === "host") {
      host = null;
      broadcast({ 
        type: "host_left",
        message: "–í–µ–¥—É—â–∏–π –≤—ã—à–µ–ª –∏–∑ –∏–≥—Ä—ã"
      });
    } else if (ws.role === "admin_panel") {
      adminPanel = null;
      console.log(`üéõÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∞`);
      // –ù–ï –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞–º, —Ç.–∫. —ç—Ç–æ –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ –∏–≥—Ä—É
    }

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å)
    if (ws.role !== "admin_panel") {
      broadcast({
        type: "player_left",
        playerId: ws.id,
        playerName: ws.name
      });
      sendPlayersUpdate();
    }
  });

  ws.on("error", (error) => {
    console.error(`üí• –û—à–∏–±–∫–∞: ${ws.name || ws.id}`, error);
  });
});

console.log("üöÄ –°–µ—Ä–≤–µ—Ä '–ë—É–Ω–∫–µ—Ä' –≥–æ—Ç–æ–≤ –¥–ª—è 8 –∏–≥—Ä–æ–∫–æ–≤!");
